DRV_SRCS =	compute_engine.c \
		file_converter.c \
		start_analysis.c

BAS_SRCS =	main.c \
		auxiliary.c \
		control_parameter.c \
		cosmology.c \
		system.c \
		times.c \
		units.c

COR_SRCS =	agn.c \
		cache.c \
		cell_buffer.c \
		config.c \
		cooling.c \
		density.c \
		gravity.c \
		hydro.c \
		hydro_tracer.c \
		index_hash.c \
		io.c \
		io_art.c \
		io_cartio.c \
		iterators.c \
		load_balance.c \
		oct_hash.c \
		pack.c \
		parallel.c \
		particle.c \
		particle_buffer.c \
		plugin.c \
		rand.c \
		refinement.c \
		refinement_indicators.c \
		refinement_operations.c \
		riemann.c \
		root_grid_fft.c \
		rt.c \
		rt_debug.c \
		rt_global.c \
		rt_io.c \
		rt_otvet.c \
		rt_transfer.c \
		sfc.c \
		skiplist.c \
		starformation.c \
		starformation_feedback.c \
		starformation_recipes.c \
		timing.c \
		tree.c \
		tree_arrays.c \
		tree_alloc.c \
		tree_count.c \
		tree_debug.c \
		tree_interpolate.c \
		tree_linkedlist.c

FRT_SRCS =	frt_background.F \
		frt_base.F \
		frt_cf3.F \
		frt_cooling.F \
		frt_cooling_solvers.F \
		frt_global.F \
		frt_io.F \
		frt_lwbands.F \
		frt_mpi.F \
		frt_spectrum.F \
		frt_tables.F \
		frt_testing.F \
		frt_transfer.F \
		frt_xrays.F

FFT_SRCS  =	fft3.c \
		ffti_pack.c

CIO_SRCS =	cartio.c \
		cartio_grid.c \
		cartio_particle.c \
		cartio_mpi.c \
		cartio_posix.c \
		cartio_parameter.c \
		cartio_endian.c

RUN_SRCS  =	gravity_step.c \
		hydro_step.c \
		hydro_tracer_step.c \
		logging.c \
		particle_step.c \
		rt_step.c \
		rt_otvet_step.c \
		rt_transfer_step.c \
		starformation_feedback_step.c \
		starformation_step.c \
		step.c

EXT_SRCS  =	cd.c \
		chull.c \
		gic_tools.c \
		halo_finder.c \
		healpix.c \
		ifrit.c \
		igm.c \
		ism.c \
		los.c \
		mesh.c \
		power.c \
		rfsfr.c \
		utils.c \
		viewdump.c \
		xrays.c \
		output_slice.c

DRV_OBJS =	$(patsubst %.c,.obj/drivers/%.o,$(DRV_SRCS))
BAS_OBJS =	$(patsubst %.c,.obj/base/%.o,$(BAS_SRCS))
COR_OBJS =	$(patsubst %.c,.obj/core/%.o,$(COR_SRCS))
FRT_OBJS =	$(patsubst %.F,.obj/frt/%.o,$(F77_SRCS))
FFT_OBJS =	$(patsubst %.c,.obj/fft/%.o,$(FFT_SRCS))
RUN_OBJS =	$(patsubst %.c,.obj/run/%.o,$(RUN_SRCS))
EXT_OBJS = 	$(patsubst %.c,.obj/extra/%.o,$(EXT_SRCS))
CIO_OBJS = 	$(patsubst %.c,.obj/cartio/io%.o,$(PIO_SRCS))

LIBC_SRCS  =
LIBF_SRCS  =	fftpack.f

LIBC_OBJS =	$(patsubst %.c,.obj/lib/%.o,$(LIBC_SRCS))
LIBF_OBJS =	$(patsubst %.f,.obj/lib/%.o,$(LIBF_SRCS))
LIB_OBJS  =     $(LIBC_OBJS) $(LIBF_OBJS)


RUN_OBJS    =	$(BAS_OBJS) $(COR_OBJS) $(FRT_OBJS) $(FFT_OBJS) $(LIB_OBJS) $(CIO_OBJS) $(RUN_OBJS) .obj/drivers/compute_engine.o
ANL_OBJS    =	$(BAS_OBJS) $(COR_OBJS) $(FRT_OBJS) $(FFT_OBJS) $(LIB_OBJS) $(CIO_OBJS) $(EXT_OBJS) .obj/drivers/compute_engine.o .obj/drivers/start_analysis.o


#$(error TRUNK IS BROKEN AND SHOULD NOT BE USED!!!!)


ifdef PLATFORM
include $(TOP_DIR)/platforms/$(PLATFORM)
else
list := $(shell ls -m $(TOP_DIR)/platforms)
$(info A variable PLATFORM must be set. Available platforms:)
$(info $(list))
$(error Fatal error)
endif

ifndef CC
$(info A variable CC must be set in the platform file.)
$(error Fatal error)
endif

ifndef F77
ifdef FC
F77 = $(FC)
endif
endif

ifndef F77
$(info A variable F77 must be set in the platform file.)
$(error Fatal error)
endif

ifndef CFLAGS
$(info A variable CFLAGS must be set in the platform file.)
$(error Fatal error)
endif

ifndef FFLAGS
$(info A variable CC must be set in the platform file.)
$(error Fatal error)
endif

ifndef CXX
$(info A variable CXX must be set in the platform file.)
$(error Fatal error)
endif

ifndef CXXFLAGS
CXXFLAGS = $(CFLAGS)
endif

#ifndef GSL_DIR
#$(info A variable GSL_DIR must be set and point to the root directory of the GSL installation.)
#$(error Fatal error)
#endif

LIBS    = -lgsl -lgslcblas -lm

DEFS = defs.h
defs.h:	
	@echo "Configuration file defs.h must be set. Available templates:"
	@ls -1 $(TOP_DIR)/config/defs.*
	@cat $(TOP_DIR)/platforms >& /dev/null

WITH_RT = $(shell fgrep RADIATIVE_TRANSFER defs.h)

ifneq ($(strip $(WITH_RT)),)
DEFS += rt_defs.h
rt_defs.h:	
	@echo "Configuration file rt_defs.h must be set. Available templates:"
	@ls -1 $(TOP_DIR)/config/rt_defs.*
	@cat $(TOP_DIR)/platforms >& /dev/null
endif

.obj/.phony:
	mkdir .obj
	echo "aaa" > .obj/.phony

.obj/drivers/.phony: .obj/.phony
	mkdir .obj/drivers
	echo "aaa" > .obj/drivers/.phony

.obj/base/.phony: .obj/.phony
	mkdir .obj/base
	echo "aaa" > .obj/base/.phony

.obj/core/.phony: .obj/.phony
	mkdir .obj/core
	echo "aaa" > .obj/core/.phony

.obj/frt/.phony: .obj/.phony
	mkdir .obj/frt
	echo "aaa" > .obj/frt/.phony

.obj/fft/.phony: .obj/.phony
	mkdir .obj/fft
	echo "aaa" > .obj/fft/.phony

.obj/cio/.phony: .obj/.phony
	mkdir .obj/cio
	echo "aaa" > .obj/cio/.phony

.obj/run/.phony: .obj/.phony
	mkdir .obj/run
	echo "aaa" > .obj/run/.phony

.obj/extra/.phony: .obj/.phony
	mkdir .obj/extra
	echo "aaa" > .obj/extra/.phony

.obj/lib/.phony: .obj/.phony
	mkdir .obj/lib
	echo "aaa" > .obj/lib/.phony

.obj/drivers/%.o: .obj/drivers/.phony $(DEFS) $(SRC_DIR)/drivers/%.c
	$(CC)  -c $(CFLAGS) $(INCLUDES) -I. -I$(SRC_DIR)/base -o $@ $(SRC_DIR)/drivers/$(*F).c

.obj/base/%.o: .obj/base/.phony $(DEFS) $(SRC_DIR)/base/%.c
	$(CC)  -c $(CFLAGS) $(INCLUDES) -I. -I$(SRC_DIR)/base -o $@ $(SRC_DIR)/base/$(*F).c

.obj/core/%.o: .obj/core/.phony $(DEFS) $(SRC_DIR)/core/%.c
	$(CC)  -c $(CFLAGS) $(INCLUDES) -I. -I$(SRC_DIR)/base -I$(SRC_DIR)/core -o $@ $(SRC_DIR)/core/$(*F).c

.obj/core/config.o: .obj/core/.phony $(DEFS) $(TOP_DIR)/config/list_defines.h $(SRC_DIR)/core/config.c
	$(CC)  -c $(CFLAGS) $(INCLUDES) \
	-DSVNREVISION="\"`svnversion -n $(TOP_DIR)`\"" \
	-DSVNBRANCH="\"`svn info $(TOP_DIR) | sed -ne 's#^URL: https://www.drudd.com/svn/cart/##p'`\"" \
	-I. -I$(SRC_DIR)/base -I$(SRC_DIR)/core -o $@ $(SRC_DIR)/core/$(*F).c

.obj/core/io_art.o: .obj/core/.phony $(DEFS) $(SRC_DIR)/core/io_art.c $(SRC_DIR)/core/io_art1.def $(SRC_DIR)/core/io_art2.def
	$(CC)  -c $(CFLAGS) $(INCLUDES) -I. -I$(SRC_DIR)/base -I$(SRC_DIR)/core -o $@ $(SRC_DIR)/$(*F).c

.obj/frt/%.o: .obj/frt/.phony $(DEFS) $(SRC_DIR)/base/rt_config.h $(SRC_DIR)/frt/%.F
	$(F77) -c $(FFLAGS) $(INCLUDES) -I. -I$(SRC_DIR)/frt -o $@ $(SRC_DIR)/frt/$(*F).F

.obj/fft/%.o: .obj/fft/.phony $(DEFS) $(SRC_DIR)/fft/%.c
	$(CC) -c $(CFLAGS) $(INCLUDES) -I. -I$(SRC_DIR)/fft -o $@ $(SRC_DIR)/fft/$(*F).c

.obj/cio/%.o: .obj/cio/.phony $(DEFS) $(SRC_DIR)/cartio/%.c
	$(CC) -c $(CFLAGS) $(INCLUDES) -I. -I$(SRC_DIR)/cartio -o $@ $(SRC_DIR)/cartio/$(*F).c

.obj/run/%.o: .obj/run/.phony $(DEFS) $(SRC_DIR)/run/%.c
	$(CC) -c $(CFLAGS) $(INCLUDES) -I. -I$(SRC_DIR)/base -I$(SRC_DIR)/core -I$(SRC_DIR)/io -o $@ $(SRC_DIR)/run/$(*F).c

.obj/extra/%.o: .obj/extra/.phony $(DEFS) $(SRC_DIR)/extra/%.c
	$(CC) -c $(CFLAGS) $(INCLUDES) -I. -I$(SRC_DIR)/base -I$(SRC_DIR)/core -I$(SRC_DIR)/io -o $@ $(SRC_DIR)/extra/$(*F).c

.obj/lib/%.o: .obj/lib/.phony $(SRC_DIR)/lib/%.f
	$(F77) -c $(FFLAGS) -I$(SRC_DIR)/lib -o $@ $(SRC_DIR)/lib/$(*F).f

.obj/lib/%.o: .obj/lib/.phony $(SRC_DIR)/lib/%.c
	$(CC) -c $(CFLAGS) -I$(SRC_DIR)/lib -o $@ $(SRC_DIR)/lib/$(*F).c

$(info **********************************************)
$(info *                                            *)
$(info *          Adaptive Refinement Tree          *)
$(info *                                            *)
$(info **********************************************)
$(info Compiling for platform: $(PLATFORM))
