COR_SRCS =	main.c \
		agn.c \
		auxiliary.c \
		cache.c \
		cell_buffer.c \
		config.c \
		control_parameter.c \
		cooling.c \
		cosmology.c \
		density.c \
		gravity.c \
		hydro.c \
		hydro_tracer.c \
		io.c \
		index_hash.c \
		iterators.c \
		load_balance.c \
		oct_hash.c \
		pack.c \
		parallel.c \
		particle.c \
		particle_buffer.c \
		plugin.c \
		refinement.c \
		refinement_indicators.c \
		refinement_operations.c \
		riemann.c \
		root_grid_fft.c \
		rt.c \
		rt_debug.c \
		rt_global.c \
		rt_io.c \
		rt_otvet.c \
		rt_transfer.c \
		sfc.c \
		skiplist.c \
		starformation.c \
		starformation_feedback.c \
		starformation_recipes.c \
		system.c \
		times.c \
		timing.c \
		tree.c \
		tree_arrays.c \
		tree_alloc.c \
		tree_count.c \
		tree_debug.c \
		tree_interpolate.c \
		tree_linkedlist.c \
		units.c

F77_SRCS =	frt_background.F \
		frt_base.F \
		frt_cooling.F \
		frt_cooling_solvers.F \
		frt_global.F \
		frt_io.F \
		frt_lwbands.F \
		frt_mpi.F \
		frt_spectrum.F \
		frt_tables.F \
		frt_testing.F \
		frt_transfer.F \
		frt_xrays.F

FFT_SRCS  =	fft3.c \
		ffti_pack.c

RUN_SRCS  =	gravity_step.c \
		hydro_step.c \
		hydro_tracer_step.c \
		logging.c \
		particle_step.c \
		rt_step.c \
		rt_otvet_step.c \
		rt_transfer_step.c \
		starformation_feedback_step.c \
		starformation_step.c \
		step.c

EXT_SRCS  =	cd.c \
		chull.c \
		gic_tools.c \
		halo_finder.c \
		healpix.c \
		ifrit.c \
		igm.c \
		ism.c \
		los.c \
		mesh.c \
		power.c \
		rfsfr.c \
		utils.c \
		viewdump.c \
		xrays.c \
		output_slice.c \
		start_analysis.c

COR_OBJS =	$(patsubst %.c,.obj/./%.o,$(COR_SRCS))
F77_OBJS =	$(patsubst %.F,.obj/F/%.o,$(F77_SRCS))
FFT_OBJS =	$(patsubst %.c,.obj/fft/%.o,$(FFT_SRCS))
RUN_OBJS =	$(patsubst %.c,.obj/run/%.o,$(RUN_SRCS))
EXT_OBJS = 	$(patsubst %.c,.obj/extra/%.o,$(EXT_SRCS))

LIBC_SRCS  =
LIBF_SRCS  =	fftpack.f

LIBC_OBJS =	$(patsubst %.c,.obj/libc/%.o,$(LIBC_SRCS))
LIBF_OBJS =	$(patsubst %.f,.obj/libf/%.o,$(LIBF_SRCS))
LIB_OBJS  =     $(LIBC_OBJS) $(LIBF_OBJS)


OBJS     =	$(COR_OBJS) $(F77_OBJS) $(FFT_OBJS) $(RUN_OBJS) $(LIB_OBJS)
OBJS2    =	$(COR_OBJS) $(F77_OBJS) $(FFT_OBJS) $(EXT_OBJS) $(LIB_OBJS)


ifdef PLATFORM
include $(TOP_DIR)/platforms/$(PLATFORM)
.obj:
	mkdir .obj .obj/F .obj/fft .obj/run .obj/extra .obj/libc .obj/libf
else
list := $(shell ls -m $(TOP_DIR)/platforms)
$(info A variable PLATFORM must be set. Available platforms:)
$(info $(list))
$(error Fatal error)
endif

ifndef CC
$(info A variable CC must be set in the platform file.)
$(error Fatal error)
endif

ifndef F77
ifdef FC
F77 = $(FC)
endif
endif

ifndef F77
$(info A variable F77 must be set in the platform file.)
$(error Fatal error)
endif

ifndef CFLAGS
$(info A variable CFLAGS must be set in the platform file.)
$(error Fatal error)
endif

ifndef FFLAGS
$(info A variable CC must be set in the platform file.)
$(error Fatal error)
endif

ifndef CXX
$(info A variable CXX must be set in the platform file.)
$(error Fatal error)
endif

ifndef CXXFLAGS
CXXFLAGS = $(CFLAGS)
endif

ifndef GSL_DIR
$(info A variable GSL_DIR must be set and point to the root directory of the GSL installation.)
$(error Fatal error)
endif

LIBS    = -L$(GSL_DIR)/lib64 -L$(GSL_DIR)/lib -lgsl -lgslcblas -lm

DEFS = defs.h
defs.h:	
	@echo "Configuration file defs.h must be set. Available templates:"
	@ls -1 $(TOP_DIR)/config/defs.*
	@cat $(TOP_DIR)/platforms >& /dev/null

WITH_RT = $(shell fgrep RADIATIVE_TRANSFER defs.h)

ifneq ($(strip $(WITH_RT)),)
DEFS += rt_defs.h
rt_defs.h:	
	@echo "Configuration file rt_defs.h must be set. Available templates:"
	@ls -1 $(TOP_DIR)/config/rt_defs.*
	@cat $(TOP_DIR)/platforms >& /dev/null
endif

.obj/./%.o: $(DEFS) $(SRC_DIR)/%.c
	$(CC)  -c $(CFLAGS) $(INCLUDES) -I. -I$(SRC_DIR) -I$(GSL_DIR)/include -o $@ $(SRC_DIR)/$(*F).c

.obj/./config.o: $(DEFS) $(TOP_DIR)/config/list_defines.h $(SRC_DIR)/config.c
	$(CC)  -c $(CFLAGS) $(INCLUDES) \
	-DSVNREVISION="\"`svnversion -n $(TOP_DIR)`\"" \
	-DSVNBRANCH="\"`svn info $(TOP_DIR) | sed -ne 's#^URL: https://www.drudd.com/svn/cart/##p'`\"" \
	-I. -I$(SRC_DIR) -o $@ $(SRC_DIR)/$(*F).c

.obj/./io.o: $(DEFS) $(SRC_DIR)/io.c $(SRC_DIR)/io1.def $(SRC_DIR)/io2.def
	$(CC)  -c $(CFLAGS) $(INCLUDES) -I. -I$(SRC_DIR) -o $@ $(SRC_DIR)/$(*F).c

.obj/F/%.o: $(DEFS) $(SRC_DIR)/rt_config.h $(SRC_DIR)/F/%.F
	$(F77) -c $(FFLAGS) $(INCLUDES) -I. -I$(SRC_DIR)/F -o $@ $(SRC_DIR)/F/$(*F).F

.obj/fft/%.o: $(DEFS) $(SRC_DIR)/fft/%.c
	$(CC) -c $(CFLAGS) $(INCLUDES) -I. -I$(SRC_DIR) -o $@ $(SRC_DIR)/fft/$(*F).c

.obj/run/%.o: $(DEFS) $(SRC_DIR)/run/%.c
	$(CC) -c $(CFLAGS) $(INCLUDES) -I. -I$(SRC_DIR) -o $@ $(SRC_DIR)/run/$(*F).c

.obj/extra/%.o: $(DEFS) $(SRC_DIR)/extra/%.c
	$(CC) -c $(CFLAGS) $(INCLUDES) -I. -I$(SRC_DIR) -o $@ $(SRC_DIR)/extra/$(*F).c

.obj/libf/%.o: $(SRC_DIR)/lib/%.f
	$(F77) -c $(FFLAGS) -I$(SRC_DIR)/lib -o $@ $(SRC_DIR)/lib/$(*F).f

.obj/libc/%.o: $(SRC_DIR)/lib/%.c
	$(CC) -c $(CFLAGS) -I$(SRC_DIR)/lib -o $@ $(SRC_DIR)/lib/$(*F).c

$(info **********************************************)
$(info *                                            *)
$(info *          Adaptive Refinement Tree          *)
$(info *                                            *)
$(info **********************************************)
$(info Compiling for platform: $(PLATFORM))
