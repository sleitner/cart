
ifndef CONFIG_INCLUDED
CONFIG_INCLUDED = 1

SRC_DIR = $(TOP_DIR)/src

DRV_SRCS =	compute_engine.c \
		file_converter.c \
		start_analysis.c

BAS_SRCS =	main.c \
		auxiliary.c \
		control_parameter.c \
		cosmology.c \
		halos.c \
		index_hash.c \
		min_heap.c \
		oct_hash.c \
		qss.c \
		rand.c \
		sfc.c \
		skiplist.c \
		stack.c \
		system.c \
		times.c \
		units.c

COR_SRCS =	agn.c \
		cache.c \
		cell_buffer.c \
		config.c \
		cooling.c \
		density.c \
		gravity.c \
		halo_finder.c \
		hydro.c \
		hydro_tracer.c \
		imf.c \
		io.c \
		io_cart.c \
		io_artio.c \
		iterators.c \
		load_balance.c \
		pack.c \
		parallel.c \
		particle.c \
		particle_buffer.c \
		particle_density.c \
		plugin.c \
		refinement.c \
		refinement_indicators.c \
		refinement_operations.c \
		riemann.c \
		root_grid_fft.c \
		rt.c \
		rt_debug.c \
		rt_global.c \
		rt_io.c \
		rt_otvet.c \
		rt_transfer.c \
		starformation.c \
		starformation_feedback.c \
		starformation_recipe.c \
		timing.c \
		tree.c \
		tree_arrays.c \
		tree_alloc.c \
		tree_count.c \
		tree_debug.c \
		tree_interpolate.c \
		tree_linkedlist.c

FRT_SRCS =	frt_background.F \
		frt_base.F \
		frt_cf3.F \
		frt_cooling.F \
		frt_cooling_solvers.F \
		frt_global.F \
		frt_io.F \
		frt_lwbands.F \
		frt_mpi.F \
		frt_spectrum.F \
		frt_tables.F \
		frt_testing.F \
		frt_transfer.F \
		frt_xrays.F

FFT_SRCS  =	fft3.c \
		ffti_pack.c

AIO_SRCS =	artio.c \
		artio_grid.c \
		artio_particle.c \
		artio_mpi.c \
		artio_posix.c \
		artio_parameter.c \
		artio_endian.c

RUN_SRCS = agn_step.c \
		gravity_step.c \
		hydro_step.c \
		hydro_tracer_step.c \
		io_step.c \
		logging.c \
		particle_step.c \
		rt_step.c \
		rt_otvet_step.c \
		rt_transfer_step.c \
		starformation_feedback_step.c \
		starformation_step.c \
		step.c

EXT_SRCS  =	cd.c \
		CO.c \
		chull.c \
		fesc.c \
		gic_tools.c \
		halo_tools.c \
		hart_io.c \
		healpix.c \
		ifrit.c \
		igm.c \
		indexed_io.c \
		interpolation.c \
		ism.c \
		los.c \
		mesh.c \
		power.c \
		rfsfr.c \
		utils.c \
		viewdump.c \
		xrays.c

DRV_OBJS =	$(patsubst %.c,.obj/%.o,$(DRV_SRCS))
BAS_OBJS =	$(patsubst %.c,.obj/%.o,$(BAS_SRCS))
COR_OBJS =	$(patsubst %.c,.obj/%.o,$(COR_SRCS))
FRT_OBJS =	$(patsubst %.F,.obj/%.o,$(FRT_SRCS))
FFT_OBJS =	$(patsubst %.c,.obj/%.o,$(FFT_SRCS))
AIO_OBJS = 	$(patsubst %.c,.obj/%.o,$(AIO_SRCS))
RUN_OBJS =	$(patsubst %.c,.obj/%.o,$(RUN_SRCS))
EXT_OBJS = 	$(patsubst %.c,.obj/extra/%.o,$(EXT_SRCS))
IOL_OBJS = 	$(patsubst %.c,.obj/io/%.o,$(AIO_SRCS)) # Non-MPI IO

LIBC_SRCS  =
LIBF_SRCS  =	fftpack.f

LIBC_OBJS =	$(patsubst %.c,.obj/%.o,$(LIBC_SRCS))
LIBF_OBJS =	$(patsubst %.f,.obj/%.o,$(LIBF_SRCS))
LIB_OBJS  =     $(LIBC_OBJS) $(LIBF_OBJS)

ifeq ($(PLUGIN),)
  PLUGIN = $(SRC_DIR)/core/default_plugin.c
endif

ifeq ($(findstring /extra,$(PLUGIN)),/extra)
  WITH_EXTRA = 1
  PLUGIN := $(PLUGIN:/extra=)
endif

ifeq ($(findstring /no_default,$(PLUGIN)),/no_default)
  PLUGIN := $(PLUGIN:/no_default=)
endif

SIM_PLUGIN_SRCS = $(notdir $(PLUGIN))
ANL_PLUGIN_SRCS = $(notdir $(PLUGIN))
SIM_PLUGIN_OBJS = $(patsubst %.c,.obj/extra/%.o,$(SIM_PLUGIN_SRCS))
ANL_PLUGIN_OBJS = $(patsubst %.c,.obj/extra/%.o,$(ANL_PLUGIN_SRCS))


SIM_OBJS    =	$(SIM_PLUGIN_OBJS) $(BAS_OBJS) $(COR_OBJS) $(FRT_OBJS) $(FFT_OBJS) $(LIB_OBJS) $(AIO_OBJS) $(RUN_OBJS) .obj/compute_engine.o
ANL_OBJS    =	$(ANL_PLUGIN_OBJS) $(BAS_OBJS) $(COR_OBJS) $(FRT_OBJS) $(FFT_OBJS) $(LIB_OBJS) $(AIO_OBJS) $(EXT_OBJS) .obj/compute_engine.o .obj/start_analysis.o
FIC_OBJS    =	$(BAS_OBJS) $(COR_OBJS) $(FRT_OBJS) $(FFT_OBJS) $(LIB_OBJS) $(AIO_OBJS) $(SFB_OBJS) .obj/file_converter.o .obj/sf_recipe.hart.o

ifeq ($(WITH_EXTRA),1)
  SIM_OBJS += $(EXT_OBJS)
endif


ifdef PLATFORM
  include $(TOP_DIR)/platforms/$(PLATFORM)
else
  list := $(shell ls -m $(TOP_DIR)/platforms)
  $(info A variable PLATFORM must be set. Available platforms:)
  $(info $(list))
  $(error Fatal error)
endif

ifndef CC
  $(info A variable CC must be set in the platform file.)
  $(error Fatal error)
endif

ifndef F77
  ifdef FC
    F77 = $(FC)
  endif
endif

ifndef F77
  $(info A variable F77 must be set in the platform file.)
  $(error Fatal error)
endif

ifndef CFLAGS
  $(info A variable CFLAGS must be set in the platform file.)
  $(error Fatal error)
endif

ifndef FFLAGS
  $(info A variable FFLAGS must be set in the platform file.)
  $(error Fatal error)
endif

ifndef CXX
  $(info A variable CXX must be set in the platform file.)
  $(error Fatal error)
endif

ifndef CXXFLAGS
  CXXFLAGS = $(CFLAGS)
endif

LIBS    = -lgsl -lgslcblas -lm

DEFS = defs.h
defs.h:	
	@echo "Configuration file defs.h must be set. Available templates:"
	@ls -1 $(TOP_DIR)/config/defs.*
	@cat $(TOP_DIR)/platforms >& /dev/null

WITH_RT = $(shell fgrep RADIATIVE_TRANSFER defs.h)

ifneq ($(strip $(WITH_RT)),)
DEFS += rt_defs.h
rt_defs.h:	
	@echo "Configuration file rt_defs.h must be set. Available templates:"
	@ls -1 $(TOP_DIR)/config/rt_defs.*
	@cat $(TOP_DIR)/platforms >& /dev/null
endif

WITH_SF = $(shell fgrep STARFORM defs.h) $(shell fgrep STAR_FORMATION defs.h)

ifneq ($(strip $(WITH_SF)),)
#
#  Parse defs.h to get the SF recipe (if it is there)
#
  $(shell cc -I. -o psf-tester $(TOP_DIR)/config/parse_sf_recipe.c)
  recipe := $(shell ./psf-tester | sed -e 's|[<>]||g')
  $(shell rm -f psf-tester)
#
#  If recipe is not in defs.h, use SF_RECIPE variable; if it is not set,
#  use <hart> as the default one. Add the proper line to defs.h.
#
  ifeq ($(recipe),)
    ifneq ($(SF_RECIPE),)
      recipe = $(SF_RECIPE)
    else
      recipe = hart
    endif
    $(shell echo " " >> defs.h)
    $(shell echo "#define SF_RECIPE <"$(recipe)">" >> defs.h)
  endif
#
#  Find all available recipes
#
  list := $(shell ls -1 $(SRC_DIR)/sf/sf_recipe.*.c | sed -e 's|.*sf_recipe\.\([[:alnum:]-]*\).c|<\1>|')
  list += <custom>
#
#  If not in the list, print all available recipes and exit
#
  ifneq (<$(recipe)>,$(filter <$(recipe)>,$(list)))
    $(info Star formation recipe should be defined with the SF_RECIPE variable in defs.h.)
    $(info Available recipes:)
    $(info $(list))
    $(error Fatal error)
  endif

  ifneq ($(recipe),custom)
    SFR_OBJS = $(patsubst %.c,.obj/%.o,sf_recipe.$(recipe).c)
    SIM_OBJS += $(SFR_OBJS)
    ANL_OBJS += $(SFR_OBJS)
  endif
#
#  Do the same with the feedback
#
  $(shell cc -I. -o psf-tester $(TOP_DIR)/config/parse_sf_feedback.c)
  feedback := $(shell ./psf-tester | sed -e 's|[<>]||g')
  $(shell rm -f psf-tester)
#
#  If feedback is not in defs.h, use SF_FEEDBACK variable; if it is not set,
#  use <snII+snIa+ml> as the default one. Add the proper line to defs.h.
#
  ifeq ($(feedback),)
    ifneq ($(SF_FEEDBACK),)
      feedback = $(SF_FEEDBACK)
    else
      feedback = hart
    endif
    $(shell echo " " >> defs.h)
    $(shell echo "#define SF_FEEDBACK <"$(feedback)">" >> defs.h)
  endif
#
#  Find all available feedbacks
#
  list := $(shell ls -1 $(SRC_DIR)/sf/sf_feedback.*.c | sed -e 's|.*sf_feedback\.\([[:alnum:]-]*\).c|<\1>|')
  list += <custom>
#
#  If not in the list, print all available recipes and exit
#
  ifneq (<$(feedback)>,$(filter <$(feedback)>,$(list)))
    $(info Star formation feedback should be defined with the SF_FEEDBACK variable in defs.h.)
    $(info Available feedback models:)
    $(info $(list))
    $(error Fatal error)
  endif
#
#  Even custom feedback models may use exiting modules
#
  SFB_SRCS = $(notdir $(wildcard $(SRC_DIR)/sf/models/feedback.*.c))
  SFB_OBJS = $(patsubst %.c,.obj/%.o,$(SFB_SRCS))

  ifneq ($(feedback),custom)
    SFB_OBJS += $(patsubst %.c,.obj/%.o,sf_feedback.$(feedback).c)
  endif

  SIM_OBJS += $(SFB_OBJS)	
  ANL_OBJS += $(SFB_OBJS)
endif


find_files = $(wildcard .obj/.phony)
ifneq ($(find_files),)
  prev_platform = $(shell cat .obj/.phony)
  ifneq ($(PLATFORM),$(prev_platform))
    $(shell rm -rf .obj)
  endif
endif


.obj/.phony:
	mkdir .obj
	echo $(PLATFORM) > .obj/.phony

.obj/extra/.phony: .obj/.phony
	mkdir .obj/extra
	echo $(PLATFORM) > .obj/extra/.phony

.obj/io/.phony: .obj/.phony
	mkdir .obj/io
	echo $(PLATFORM) > .obj/io/.phony

.obj/%.o: .obj/.phony $(DEFS) $(SRC_DIR)/drivers/%.c
	$(CC) $(CFLAGS) $(INCLUDES) -I. -I$(SRC_DIR)/base -o $@ -c $(SRC_DIR)/drivers/$(*F).c

.obj/%.o: .obj/.phony $(DEFS) $(SRC_DIR)/base/%.c
	$(CC) $(CFLAGS) $(INCLUDES) -I. -I$(SRC_DIR)/base -o $@ -c $(SRC_DIR)/base/$(*F).c

.obj/config.o: .obj/.phony $(DEFS) $(TOP_DIR)/config/list_defines.h $(SRC_DIR)/core/config.c
	$(CC) $(CFLAGS) $(INCLUDES) \
	-DREPO_PARENT="\"`hg paths | sed -ne 's#^default = ##p'`\"" \
	-DREPO_VERSION="\"`hg parent --template '{latesttag}.{latesttagdistance}'`\"" \
	-DREPO_REVISION="\"`hg id -i`\"" \
	-I. -I$(SRC_DIR)/base -I$(SRC_DIR)/core -o $@ -c $(SRC_DIR)/core/$(*F).c

.obj/io_cart.o: .obj/.phony $(DEFS) $(SRC_DIR)/core/io_cart.c $(SRC_DIR)/core/io_cart1.def $(SRC_DIR)/core/io_cart2.def
	$(CC) $(CFLAGS) $(INCLUDES) -I. -I$(SRC_DIR)/base -I$(SRC_DIR)/core -o $@ -c $(SRC_DIR)/core/$(*F).c

.obj/io_artio.o: .obj/.phony $(DEFS) $(SRC_DIR)/core/io_artio.c $(SRC_DIR)/tools/artio/artio.h
	$(CC) $(CFLAGS) $(INCLUDES) -I. -I$(SRC_DIR)/base -I$(SRC_DIR)/core -DARTIO_MPI -o $@ -c $(SRC_DIR)/core/$(*F).c

.obj/%.o: .obj/.phony $(DEFS) $(SRC_DIR)/core/%.c
	$(CC) $(CFLAGS) $(INCLUDES) -I. -I$(SRC_DIR)/base -I$(SRC_DIR)/core -o $@ -c $(SRC_DIR)/core/$(*F).c

.obj/%.o: .obj/.phony $(DEFS) $(SRC_DIR)/base/rt_config.h $(SRC_DIR)/core/frt/%.F
	$(F77) $(FFLAGS) $(INCLUDES) -I. -I$(SRC_DIR)/base -I$(SRC_DIR)/core/frt -o $@ -c $(SRC_DIR)/core/frt/$(*F).F

.obj/%.o: .obj/.phony $(DEFS) $(SRC_DIR)/tools/fft/%.c
	$(CC) $(CFLAGS) $(INCLUDES) -I. -I$(SRC_DIR)/base -I$(SRC_DIR)/tools/fft -o $@ -c $(SRC_DIR)/tools/fft/$(*F).c

.obj/%.o: .obj/.phony $(SRC_DIR)/tools/artio/%.c
	$(CC) $(CFLAGS) $(INCLUDES) -I. -I$(SRC_DIR)/tools/artio -DARTIO_MPI -o $@ -c $(SRC_DIR)/tools/artio/$(*F).c

.obj/%.o: .obj/.phony $(DEFS) $(SRC_DIR)/run/%.c
	$(CC) $(CFLAGS) $(INCLUDES) -I. -I$(SRC_DIR)/base -I$(SRC_DIR)/core -o $@ -c $(SRC_DIR)/run/$(*F).c

.obj/%.o: .obj/.phony $(DEFS) $(SRC_DIR)/sf/%.c
	$(CC) $(CFLAGS) $(INCLUDES) -I. -I$(SRC_DIR)/base -I$(SRC_DIR)/core -o $@ -c $(SRC_DIR)/sf/$(*F).c

.obj/%.o: .obj/.phony $(DEFS) $(SRC_DIR)/sf/models/%.c
	$(CC) $(CFLAGS) $(INCLUDES) -I. -I$(SRC_DIR)/base -I$(SRC_DIR)/core -o $@ -c $(SRC_DIR)/sf/models/$(*F).c

.obj/%.o: .obj/.phony $(SRC_DIR)/tools/other/%.f
	$(F77) $(FFLAGS) -I$(SRC_DIR)/tools/other -o $@ -c $(SRC_DIR)/tools/other/$(*F).f

.obj/%.o: .obj/.phony $(SRC_DIR)/tools/other/%.c
	$(CC) $(CFLAGS) -I$(SRC_DIR)/tools/other -o $@ -c $(SRC_DIR)/tools/other/$(*F).c

.obj/extra/default_plugin.o: .obj/extra/.phony $(DEFS) $(SRC_DIR)/core/default_plugin.c
	$(CC) $(CFLAGS) $(INCLUDES) -I. -I$(SRC_DIR)/base -I$(SRC_DIR)/core -o $@ -c $(SRC_DIR)/core/default_plugin.c

.obj/extra/%.o: .obj/extra/.phony $(DEFS) $(SRC_DIR)/extra/%.c
	$(CC) $(CFLAGS) $(INCLUDES) -I. -I$(SRC_DIR)/base -I$(SRC_DIR)/core -o $@ -c $(SRC_DIR)/extra/$(*F).c

.obj/extra/%.o: .obj/extra/.phony $(DEFS) $(filter %$(*F).c,$(PLUGIN))
	$(CC) $(CFLAGS) -I. $(INCLUDES) -I$(SRC_DIR)/base -I$(SRC_DIR)/core -I$(SRC_DIR)/extra -o $@ -c $(filter %$(*F).c,$(PLUGIN))

.obj/io/%.o: .obj/.phony .obj/io/.phony $(SRC_DIR)/tools/artio/%.c
	$(CC) $(CFLAGS) $(INCLUDES) -I. -I$(SRC_DIR)/tools/artio -o $@ -c $(SRC_DIR)/tools/artio/$(*F).c

clean:
	rm -rf .obj core $(CLEAN)

all:
	$(MAKE) $(ALL)

info:
	which mpirun

$(info **********************************************)
$(info *                                            *)
$(info *          Adaptive Refinement Tree          *)
$(info *                                            *)
$(info *                 Version 1.9                *)
$(info *                                            *)
$(info **********************************************)
$(info Compiling for platform: $(PLATFORM))

endif
