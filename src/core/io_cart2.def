/*
//  C-style poor man template
*/

#ifndef FUNCTION
#error "FUNCTION must be defined"
#endif

#ifndef PARTICLE_FLOAT
#error "PARTICLE_FLOAT must be defined"
#endif

#ifndef MPI_PARTICLE_FLOAT
#error "MPI_PARTICLE_FLOAT must be defined"
#endif

#ifndef PARTICLE_TIMES_FLOAT
#error "PARTICLE_TIMES_FLOAT must be defined"
#endif

#ifndef MPI_PARTICLE_TIMES_FLOAT
#error "MPI_PARTICLE_TIMES_FLOAT must be defined"
#endif

void FUNCTION( char *header_filename, char *data_filename, 
			char *timestep_filename, char *stellar_filename,
			int num_sfcs, int *sfc_list ) {
	int i, j;
	int proc;
	int *page_ids[MAX_PROCS];
	PARTICLE_FLOAT *page[MAX_PROCS];
	PARTICLE_FLOAT *input_page, *x, *y, *z, *vx, *vy, *vz;
	PARTICLE_TIMES_FLOAT *times_page[MAX_PROCS];
	PARTICLE_TIMES_FLOAT *input_times;
	double dt;
	int ipart;
	int sfc;
	int num_read;
	int count[MAX_PROCS];
	int coords[nDim];
	int num_parts_in_page, num_parts_per_page;
	int num_parts_per_proc_page;
	int num_pages, index;
	int current_page[MAX_PROCS];
	int current_id, current_type;
	int size, endian, dt_endian, stellar_endian;
	int *sfc_map;
	FILE *input;
	FILE *timestep_input;
	particle_header header;
	int nbody_flag;
	int grid_change_flag;
	float rfact, vfact;
	float grid_shift;
	MPI_Status status;

#ifdef COSMOLOGY
	struct CosmologyParameters temp_cosmo;
#endif /* COSMOLOGY */

#ifdef STAR_FORMATION
	FILE *stellar_input;
	int num_stars;
	double st, sa;
	int first_star, first_star_index, num_stars_to_read;
	long seek_amount, var_first;
	float *pw, *pw0, *tbirth, *zstII, *zstIa;
	float *star_page[MAX_PROCS];
	int num_star_vars[MAX_PROCS];
#ifdef STAR_PARTICLE_TYPES
	int star_types_flag = 1;
	int *types;
	int *star_type_page[MAX_PROCS];
#endif /* STAR_PARTICLE_TYPES */
#ifdef ENRICHMENT
#ifdef ENRICHMENT_SNIa
	#define num_star_variables	5
#else
	#define num_star_variables	4
#endif /* ENRICHMENT_SNIa */
#else
	#define num_star_variables	3
#endif /* ENRICHMENT */
#endif /* STAR_FORMATION */

	if ( local_proc_id == MASTER_NODE ) {
		read_cart_particle_header( header_filename, &header, &endian, &nbody_flag );

		cart_debug("auni  = %e", header.aunin );
		cart_debug("auni0 = %e", header.auni0 );
		cart_debug("amplt = %e", header.amplt );
		cart_debug("astep = %e", header.astep );
		cart_debug("istep = %u", header.istep );
		cart_debug("Ngrid = %u", header.Ngrid );
		cart_debug("Nrow = %u", header.Nrow );
		cart_debug("Nspecies = %u", header.Nspecies );
		cart_debug("OmegaM = %e", header.OmM0 );
		cart_debug("OmegaL = %e", header.OmL0 );
		cart_debug("hubble = %e", header.h100 );
		cart_debug("OmegaB = %e", header.OmB0 );

		cart_debug("DelDC = %e", header.DelDC );

#ifdef COSMOLOGY
		cart_debug("abox  = %e", header.abox );

		/* set cosmology & units */
		cosmology_set(OmegaM,header.OmM0);
		cosmology_set(OmegaL,header.OmL0);
		cosmology_set(OmegaB,header.OmB0);
		cosmology_set(h,header.h100);
		cosmology_set(DeltaDC,header.DelDC);

		/* NG: trust only the global scale factor */
		auni[min_level]	= header.aunin;
		auni_init	= header.auni0;

		tl[min_level]  = tcode_from_auni(auni[min_level]);
		abox[min_level] = abox_from_auni(auni[min_level]);
		abox_old[min_level] = abox[min_level] - header.astep;

		if ( header.astep > 0.0 ) {
			dt = tl[min_level] - tcode_from_abox(abox[min_level]-header.astep);
		} else {
			dt = 0.0;
		}

#else

		cart_debug("tl    = %e", header.abox );

		tl[min_level]  = header.abox;
		dt = 0.0;
		units_set(header.OmM0,header.OmB0,header.OmL0);

#endif /* COSMOLOGY */

		step                  = header.istep;
		cart_particle_num_row  = header.Nrow;
	
		if ( nbody_flag ) {
			vfact = 2.0/sqrt(header.OmM0);
			grid_shift = 1.5;
		} else {
			vfact = 1.0;
			grid_shift = 1.0;
		}
	
		/* only root node needs to keep energy conservation variables */
		tintg		= header.tintg;
		ekin		= header.ekin;
		ekin1		= header.ekin1;
		ekin2		= header.ekin2;
		au0			= header.au0;
		aeu0		= header.aeu0;

#ifdef COSMOLOGY
		ap0         = abox_from_tcode( tl[min_level] - 0.5*dt );
#else
		ap0         = 1.0;
#endif

#ifndef OLDSTYLE_PARTICLE_FILE_IGNORE_NGRID
		if ( header.Ngrid != num_grid ) {
			cart_debug( "Mismatch between particle file num_grid and compiled value!" );

			rfact = (float)num_grid / (float)header.Ngrid;
			vfact *= rfact;
			grid_change_flag = 1;

			for ( i = 0; i < header.Nspecies; i++ ) {
				header.mass[i] *= rfact*rfact*rfact;
			}
		} else
#endif
		{
			grid_change_flag = 0;
		}

		if ( header.Nspecies > MAX_PARTICLE_SPECIES ) {
			cart_error( "header.Nspecies > MAX_PARTICLE_SPECIES.  Increase and rerun.");
		}

		cart_debug("Particle unit conversions:");
		cart_debug("grid_shift = %f", grid_shift );

		if ( grid_change_flag ) {
			cart_debug("grid_change_flag = %f", grid_change_flag );
		}

		if ( nbody_flag || grid_change_flag ) {
			cart_debug("vfact = %e", vfact );
		}
				
		num_particle_species = header.Nspecies;
	
		particle_species_indices[0] = 0;
		for ( i = 0; i < num_particle_species; i++ ) {
			particle_species_mass[i] = header.mass[i];
			particle_species_indices[i+1] = header.num[i];
			particle_species_num[i] = particle_species_indices[i+1] - particle_species_indices[i];

			cart_debug("particle_species_mass[%u] = %e", i, particle_species_mass[i] );
			cart_debug("particle_species_num[%u] = %u", i, particle_species_num[i] );
		}

		for ( i = 0; i <= num_particle_species; i++ ) {
			cart_debug("particle_species_indices[%u] = %d", i, particle_species_indices[i] );
		}

		num_particles_total = particle_species_indices[num_particle_species];
		cart_debug("num_particles_total = %u", num_particles_total );

		num_parts_per_page = header.Nrow*header.Nrow;
		num_parts_per_proc_page = num_parts_per_page/num_procs;
		num_pages = (num_particles_total-1) / num_parts_per_page + 1;

		cart_assert( num_pages > 0 && num_parts_per_page*num_pages >= num_particles_total );

#ifdef STAR_FORMATION
		if ( stellar_filename == NULL ) {
			/* ICs don't include stars, initialize species to 0 */
			if ( num_particle_species+1 > MAX_PARTICLE_SPECIES ) {
				cart_error("header.Nspecies > MAX_PARTICLE_SPECIES.  Increase and rerun.");
			}
			particle_species_indices[num_particle_species+1] = particle_species_indices[num_particle_species];
			particle_species_num[num_particle_species] = 0;
			particle_species_mass[num_particle_species] = 0.0;
			num_particle_species++;

			total_stellar_mass = 0.0;
			total_stellar_initial_mass = 0.0;
#ifdef STAR_PARTICLE_TYPES                                                                                                                                                                                
            star_types_flag = 0;
#endif /* STAR_PARTICLE_TYPES */
		} else {
			stellar_input = fopen( stellar_filename, "r" );
			if ( stellar_input == NULL ) {
				cart_error("Unable to open file %s for reading.", stellar_filename );
			}

			/* read in header */
			fread( &size, sizeof(int), 1, stellar_input );
			if ( size != 2*sizeof(double) ) {
				reorder( (char *)&size, sizeof(int) );

				if ( size != 2*sizeof(double) ) {
					cart_error("Error reading from %s.", stellar_filename );
				}

				stellar_endian = 1;
			} else {
				stellar_endian = 0;
			}

			fread( &st, sizeof(double), 1, stellar_input );
			fread( &sa, sizeof(double), 1, stellar_input );
			fread( &size, sizeof(int), 1, stellar_input );

			fread( &size, sizeof(int), 1, stellar_input );
			fread( &num_stars, sizeof(int), 1, stellar_input );
			fread( &size, sizeof(int), 1, stellar_input );

			if ( stellar_endian ) {
				reorder( (char *)&num_stars, sizeof(int) );
			}

			if ( num_stars != particle_species_num[num_particle_species-1] ) {
				cart_error("num_stars in %s doesn't match last particle specie.", stellar_filename );
			}

			fread( &size, sizeof(int), 1, stellar_input );
			fread( &total_stellar_mass, sizeof(double), 1, stellar_input );
			fread( &total_stellar_initial_mass, sizeof(double), 1, stellar_input );
			fread( &size, sizeof(int), 1, stellar_input );

			if ( stellar_endian ) {
				reorder( (char *)&total_stellar_mass, sizeof(double) );
				reorder( (char *)&total_stellar_initial_mass, sizeof(double) );
			}

			pw = cart_alloc(float, num_parts_per_page );
			pw0 = cart_alloc(float, num_parts_per_page );
			tbirth = cart_alloc(float, num_parts_per_page );

#ifdef ENRICHMENT
			zstII = cart_alloc(float, num_parts_per_page );
#ifdef ENRICHMENT_SNIa
			zstIa = cart_alloc(float, num_parts_per_page );
#endif /* ENRICHMENT_SNIa */
#endif /* ENRICHMENT */

#ifdef STAR_PARTICLE_TYPES
			types = cart_alloc(int, num_parts_per_page );

			/* check for types field in stars file */
			var_first = 2*sizeof(int) + 2*sizeof(double)    /* t, a */
						+ 2*sizeof(int) + sizeof(int)       /* num_stars */
						+ 2*sizeof(int) + 2*sizeof(double) /* ws_old, ws_oldi */
						+ 2*sizeof(int) + num_stars*sizeof(float) /* pw */
						+ 2*sizeof(int) + num_stars*sizeof(float) /* pw0 */
						+ 2*sizeof(int) + num_stars*sizeof(float) /* tbirth */
#ifdef ENRICHMENT
						+ 2*sizeof(int) + num_stars*sizeof(float) 
#ifdef ENRICHMENT_SNIa
						+ 2*sizeof(int) + num_stars*sizeof(float)   
#endif /* ENRICHMENT_SNIa */
#endif /* ENRICHMENT */
				;

			fseek( stellar_input, var_first, SEEK_SET );
                                                                                                                                                                                                          
			if ( fread( &size, sizeof(int), 1, stellar_input ) != 1 ) {
				cart_debug("File %s appears not to contain STAR_PARTICLE_TYPES, setting default values...", stellar_filename );
				star_types_flag = 0;
			}
#endif /* STAR_PARTICLE_TYPES */

			/* allocate buffer space for particles on other processors */
			for ( i = 1; i < num_procs; i++ ) {
				star_page[i] = cart_alloc(float, num_star_variables*num_parts_per_proc_page );
				num_star_vars[i] = 0;
#ifdef STAR_PARTICLE_TYPES
				star_type_page[i] = cart_alloc(int, num_parts_per_proc_page );
#endif /* STAR_PARTICLE_TYPES */
			}
		}
#endif /* STAR_FORMATION */

#ifdef COSMOLOGY
		MPI_Bcast( &auni[min_level], 1, MPI_DOUBLE, MASTER_NODE, mpi.comm.run );
		MPI_Bcast( &abox[min_level], 1, MPI_DOUBLE, MASTER_NODE, mpi.comm.run );
		MPI_Bcast( &auni_init, 1, MPI_DOUBLE, MASTER_NODE, mpi.comm.run );
		MPI_Bcast( (char *)cosmology, sizeof(struct CosmologyParameters), MPI_BYTE, MASTER_NODE, mpi.comm.run );
#endif /* COSMOLOGY */

		MPI_Bcast( &tl[min_level], 1, MPI_DOUBLE, MASTER_NODE, mpi.comm.run );
		MPI_Bcast( &dt, 1, MPI_DOUBLE, MASTER_NODE, mpi.comm.run );

		MPI_Bcast( &step, 1, MPI_INT, MASTER_NODE, mpi.comm.run );
		MPI_Bcast( &cart_particle_num_row, 1, MPI_INT, MASTER_NODE, mpi.comm.run );
		MPI_Bcast( &num_particle_species, 1, MPI_INT, MASTER_NODE, mpi.comm.run );
		MPI_Bcast( &num_particles_total, 1, MPI_LONG, MASTER_NODE, mpi.comm.run );
		MPI_Bcast( &num_parts_per_page, 1, MPI_INT, MASTER_NODE, mpi.comm.run );
		MPI_Bcast( &num_parts_per_proc_page, 1, MPI_INT, MASTER_NODE, mpi.comm.run );
		MPI_Bcast( &num_pages, 1, MPI_INT, MASTER_NODE, mpi.comm.run );
		MPI_Bcast( particle_species_mass, num_particle_species, MPI_FLOAT, MASTER_NODE, mpi.comm.run );
		MPI_Bcast( particle_species_num, num_particle_species, MPI_INT, MASTER_NODE, mpi.comm.run );
		MPI_Bcast( particle_species_indices, num_particle_species+1, MPI_INT, MASTER_NODE, mpi.comm.run );

		if ( num_sfcs > 0 ) {
			/* create hash for quick checking if we should read in particles */
			sfc_map = cart_alloc(int, num_root_cells );

			for ( i = 0; i < num_root_cells; i++ ) {
				sfc_map[i] = 0;
			}

			for ( sfc = 0; sfc < num_sfcs; sfc++ ) {
				sfc_map[ sfc_list[sfc] ] = 1;
			}
		}

		input_page = cart_alloc(PARTICLE_FLOAT, 2*nDim*num_parts_per_page );

		x = input_page;
		y = &input_page[num_parts_per_page];
		z = &input_page[2*num_parts_per_page];
		vx = &input_page[3*num_parts_per_page];
		vy = &input_page[4*num_parts_per_page];
		vz = &input_page[5*num_parts_per_page];

		/* allocate buffer space for particles on other processors */
		for ( i = 1; i < num_procs; i++ ) {
			page[i] = cart_alloc(PARTICLE_FLOAT, 2*nDim*num_parts_per_proc_page );
			page_ids[i] = cart_alloc(int, num_parts_per_proc_page );
			count[i] = 0;
			current_page[i] = 0;
		}

		/* start loading actual particle data */
		input = fopen( data_filename, "r" );
		if ( input == NULL ) {
			cart_error( "Unable to open particle file %s for reading!", data_filename );
		}

		if ( timestep_filename != NULL ) {
			for ( i = 1; i < num_procs; i++ ) {
				times_page[i] = cart_alloc(PARTICLE_TIMES_FLOAT, num_parts_per_proc_page );
			}
		
			timestep_input = fopen( timestep_filename, "r");
			if ( timestep_input == NULL ) {
				cart_error("Unable to open particle dt file %s for reading.", timestep_filename );
			}

			input_times = cart_alloc(PARTICLE_TIMES_FLOAT, num_parts_per_page );

			fread( &size, sizeof(int), 1, timestep_input );

			if ( num_particles_total > (1<<29) ) {
				dt_endian = endian;
			} else 	if ( size != num_particles_total * sizeof(PARTICLE_TIMES_FLOAT) ) {
				reorder( (char *)&size, sizeof(int) );

				if ( size != num_particles_total * sizeof(PARTICLE_TIMES_FLOAT) ) {
					cart_error("Error: particle dt file %s is corrupt.", timestep_filename );
				} else {
					dt_endian = 1;
				}
			} else {
				dt_endian = 0;
			}
		}

		current_id = 0;
		current_type = 0;

		for ( i = 0; i < num_pages; i++ ) {
			if ( i == num_pages - 1 ) {
				num_parts_in_page = num_particles_total - num_parts_per_page*(num_pages-1);
			} else {
				num_parts_in_page = num_parts_per_page;
			}

			num_read = fread( input_page, sizeof(PARTICLE_FLOAT), 2*nDim*num_parts_per_page, input );
			if ( num_read != 2*nDim*num_parts_per_page ) {
				cart_error("Error reading from particle file %s: insufficient data", data_filename );
			}

			if ( endian ) {
				for ( j = 0; j < num_parts_in_page; j++ ) {
					reorder( (char *)&x[j], sizeof(PARTICLE_FLOAT) );
					reorder( (char *)&y[j], sizeof(PARTICLE_FLOAT) );
					reorder( (char *)&z[j], sizeof(PARTICLE_FLOAT) );
					reorder( (char *)&vx[j], sizeof(PARTICLE_FLOAT) );
					reorder( (char *)&vy[j], sizeof(PARTICLE_FLOAT) );
					reorder( (char *)&vz[j], sizeof(PARTICLE_FLOAT) );
				}
			}

			if ( timestep_filename != NULL ) {
				num_read = fread( input_times, sizeof(PARTICLE_TIMES_FLOAT), num_parts_in_page, timestep_input );

				if ( num_read != num_parts_in_page ) {
					cart_error("Error: ran out of particle dt's in %s.", timestep_filename );
				}

				if ( dt_endian ) {
					for ( j = 0; j < num_parts_in_page; j++ ) {
						reorder( (char *)&input_times[j], sizeof(PARTICLE_TIMES_FLOAT) );
					}
				}
			}

#ifdef STAR_FORMATION
			if ( stellar_filename != NULL ) {
				/* have we reached star particles yet? */
				if ( particle_id_is_star(current_id+num_parts_in_page-1) ) {
					/* load page values for stars */
					first_star = MAX( current_id - particle_species_indices[num_particle_species-1], 0 );
					cart_assert( first_star >= 0 && first_star < num_stars );

					first_star_index = first_star + particle_species_indices[num_particle_species-1] - current_id;
					cart_assert( first_star_index >= 0 && first_star_index < num_parts_per_page );

					num_stars_to_read = MIN( num_parts_in_page - first_star_index, 
						particle_species_indices[num_particle_species] - first_star );

					cart_assert( num_stars_to_read >= 0 && num_stars_to_read <= num_parts_in_page );

					var_first = 2*sizeof(int) + 2*sizeof(double) +		/* t, a */
						+ 2*sizeof(int) + sizeof(int) +			/* num_stars */
						+ 2*sizeof(int) + 2*sizeof(double) +		/* ws_old, ws_oldi */
						+ sizeof(int) + first_star*sizeof(float);	/* skip over first pw */

					seek_amount = (num_stars - num_stars_to_read)*sizeof(float) + 2*sizeof(int);

					/* weights */
					if ( fseek( stellar_input, var_first, SEEK_SET ) ) {
						cart_error("Error seeking to %u in file %s",
							num_stars*sizeof(float) + sizeof(int), stellar_filename );
					}

					num_read = fread( &pw[first_star_index], sizeof(float), num_stars_to_read, stellar_input );
					if ( num_read != num_stars_to_read ) {
						cart_error("Error reading from stellar file %s", stellar_filename );
					}

					if ( stellar_endian ) {
						for ( j = 0; j < num_stars_to_read; j++ ) {
							reorder( (char *)&pw[first_star_index+j], sizeof(float) );
						}
					}
					
					/* original weights */
					if ( fseek( stellar_input, seek_amount, SEEK_CUR ) ) {
						cart_error("Error seeking %u bytes in file %s", seek_amount, stellar_filename );
					}

					num_read = fread( &pw0[first_star_index], sizeof(float), num_stars_to_read, stellar_input );
					if ( num_read != num_stars_to_read ) {
						cart_error("Error reading from stellar file %s", stellar_filename );
					}

					if ( stellar_endian ) {
						for ( j = 0; j < num_stars_to_read; j++ ) {
							reorder( (char *)&pw0[first_star_index+j], sizeof(float) );
						}
					}

					/* birth times */
					if ( fseek( stellar_input, seek_amount, SEEK_CUR ) ) {
						cart_error("Error seeking %u bytes in file %s", seek_amount, stellar_filename );
					}

					num_read = fread( &tbirth[first_star_index], sizeof(float), num_stars_to_read, stellar_input );
					if ( num_read != num_stars_to_read ) {
						cart_error("Error reading from stellar file %s", stellar_filename );
					}

					if ( stellar_endian ) {
						for ( j = 0; j < num_stars_to_read; j++ ) {
							reorder( (char *)&tbirth[first_star_index+j], sizeof(float) );
						}
					}

#ifdef ENRICHMENT
					/* metallicity */
					if ( fseek( stellar_input, seek_amount, SEEK_CUR ) ) {
						cart_error("Error seeking %u bytes in file %s", seek_amount, stellar_filename );
					}

					num_read = fread( &zstII[first_star_index], sizeof(float), num_stars_to_read, stellar_input );
					if ( num_read != num_stars_to_read ) {
						cart_error("Error reading from stellar file %s", stellar_filename );
					}
                                                                                                                                                            
					if ( stellar_endian ) {
						for ( j = 0; j < num_stars_to_read; j++ ) {
							reorder( (char *)&zstII[first_star_index+j], sizeof(float) );
						}
					}

#endif /* ENRICHMENT */
#ifdef ENRICHMENT_SNIa
					if ( fseek( stellar_input, seek_amount, SEEK_CUR ) ) {
						cart_error("Error seeking %u bytes in file %s", seek_amount, stellar_filename );
					}

					num_read = fread( &zstIa[first_star_index], sizeof(float), num_stars_to_read, stellar_input );
					if ( num_read != num_stars_to_read ) {
						cart_error("Error reading from stellar file %s", stellar_filename );
					}

					if ( stellar_endian ) {
						for ( j = 0; j < num_stars_to_read; j++ ) {
							reorder( (char *)&zstIa[first_star_index+j], sizeof(float) );
						}
					}
#endif /* ENRICHMENT_SNIa */
#ifdef STAR_PARTICLE_TYPES                                                                                                                                                                                
					if ( star_types_flag ) {
						if ( fseek( stellar_input, seek_amount, SEEK_CUR ) ) {
							cart_error("Error seeking %u bytes in file %s", seek_amount, stellar_filename );
						}

						num_read = fread( &types[first_star_index], sizeof(int), num_stars_to_read, stellar_input );
						if ( num_read != num_stars_to_read ) {
							cart_error("Error reading from stellar file %s", stellar_filename );
						}

						if ( stellar_endian ) {
							for ( j = 0; j < num_stars_to_read; j++ ) {
								reorder( (char *)&types[first_star_index+j], sizeof(int) );
							}
						}
					} else {
						for ( j = 0; j < num_stars_to_read; j++ ) {
							types[first_star_index+j] = STAR_TYPE_NORMAL;
						}
					}
#endif /* STAR_PARTICLE_TYPES */
				}
			}
#endif /* STAR_FORMATION */

			for ( j = 0; j < num_parts_in_page; j++ ) {
#if defined(STAR_FORMATION) && defined(STAR_PARTICLE_TYPES)
				if ( star_types_flag && types[j] == STAR_TYPE_DELETED ) {
					proc = -1;
				} else {
#endif
				/* convert to our coordinates 0->num_grid */
				x[j] -= grid_shift;
				y[j] -= grid_shift;
				z[j] -= grid_shift;

				if ( grid_change_flag ) {
					x[j] *= rfact;
					y[j] *= rfact;
					z[j] *= rfact;
				}

				if ( nbody_flag || grid_change_flag ) {
					vx[j] *= vfact;
					vy[j] *= vfact;
					vz[j] *= vfact;
				}
				
				/* enforce periodic boundary conditions */
				if ( x[j] < 0.0 ) {
					x[j] += (double)num_grid;
				} else if ( x[j] >= (double)num_grid ) {
					x[j] -= (double)num_grid;
				}

				if ( y[j] < 0.0 ) {
					y[j] += (double)num_grid;
				} else if ( y[j] >= (double)num_grid ) {
					y[j] -= (double)num_grid;
				}

				if ( z[j] < 0.0 ) {
					z[j] += (double)num_grid;
				} else if ( z[j] >= (double)num_grid ) {
					z[j] -= (double)num_grid;
				}

				coords[0] = (int)(x[j]);
				coords[1] = (int)(y[j]);
				coords[2] = (int)(z[j]);

				index = sfc_index( coords );
				cart_assert( index >= 0 && index < max_sfc_index );

				/* check if we're supposed to read in this particle */
				if ( num_sfcs > 0 && sfc_map[index] == 0 ) {
					proc = -1;
				} else if ( num_procs == 1 ) {
					proc = MASTER_NODE;
				} else {
					proc = processor_owner( index );
				}

#if defined(STAR_FORMATION) && defined(STAR_PARTICLE_TYPES) 
				}
#endif /* STAR_FORMATION && STAR_PARTICLE_TYPES */

				while ( current_type < num_particle_species-1 && current_id >= particle_species_indices[current_type+1] ) {
					current_type++;
				}

				if ( proc == MASTER_NODE ) {
					ipart = particle_alloc( current_id );
					cart_assert( ipart >= 0 && ipart < num_particles );

					particle_x[ipart][0] = x[j];
					particle_x[ipart][1] = y[j];
					particle_x[ipart][2] = z[j];
					particle_v[ipart][0] = vx[j];
					particle_v[ipart][1] = vy[j];
					particle_v[ipart][2] = vz[j];

					if( particle_species( current_id ) != current_type )
					{
						cart_error("Assertion failed: particle_species(%d)=%d, current_type=%d",current_id,particle_species(current_id),current_type);
					}

					particle_t[ipart] = tl[min_level];
					if ( timestep_filename == NULL ) {
						particle_dt[ipart] = dt;
					} else {
						particle_dt[ipart] = input_times[j];
					}

#ifdef STAR_FORMATION
					if ( stellar_filename != NULL && particle_id_is_star( current_id ) ) {
						cart_assert( ipart >= 0 && ipart < num_star_particles );
						cart_assert( particle_is_star(ipart) );

						star_tbirth[ipart] = tbirth[j];
						star_initial_mass[ipart] = pw0[j];
						particle_mass[ipart] = pw[j];

						cart_assert( star_initial_mass[ipart] > 0.0 );

#ifdef ENRICHMENT
						star_metallicity_II[ipart] = zstII[j];
#ifdef ENRICHMENT_SNIa
						star_metallicity_Ia[ipart] = zstIa[j];
#endif /* ENRICHMENT_SNIa */
#endif /* ENRICHMENT */
#ifdef STAR_PARTICLE_TYPES
						star_particle_type[ipart] = types[j];
#endif /* STAR_PARTICLE_TYPES */
					} else {
						particle_mass[ipart] = particle_species_mass[particle_species(current_id)];
					}
#else
					particle_mass[ipart] = particle_species_mass[particle_species(current_id)];
#endif /* STAR_FORMATION */

				} else if ( proc >= 0 && proc < num_procs ) {
					/* add the particle to a processor page */
					page_ids[proc][count[proc]] = current_id;
					page[proc][2*nDim*count[proc]] = x[j];
					page[proc][2*nDim*count[proc]+1] = y[j];
					page[proc][2*nDim*count[proc]+2] = z[j];
					page[proc][2*nDim*count[proc]+3] = vx[j];
					page[proc][2*nDim*count[proc]+4] = vy[j];
					page[proc][2*nDim*count[proc]+5] = vz[j];

					if ( timestep_filename != NULL ) {
						times_page[proc][count[proc]] = input_times[j];
					}

#ifdef STAR_FORMATION
					if ( stellar_filename != NULL && particle_id_is_star( current_id ) ) {
						star_page[proc][num_star_vars[proc]++] = pw[j];
						star_page[proc][num_star_vars[proc]++] = pw0[j];
						star_page[proc][num_star_vars[proc]++] = tbirth[j];
					
#ifdef ENRICHMENT
						star_page[proc][num_star_vars[proc]++] = zstII[j];
#endif /* ENRICHMENT */
#ifdef ENRICHMENT_SNIa
						star_page[proc][num_star_vars[proc]++] = zstIa[j];
#endif /* ENRICHMENT_SNIa */
#ifdef STAR_PARTICLE_TYPES
						star_type_page[proc][count[proc]] = types[j];
#endif /* STAR_PARTICLE_TYPES */
					}
#endif /* STAR_FORMATION */

					count[proc]++;

					if ( count[proc] == num_parts_per_proc_page ) {
						MPI_Send( page_ids[proc], num_parts_per_proc_page, MPI_INT, proc, 
							2*current_page[proc], mpi.comm.run );
						MPI_Send( page[proc], 2*nDim*num_parts_per_proc_page, 
							MPI_PARTICLE_FLOAT, proc, current_page[proc], mpi.comm.run );

						if ( timestep_filename != NULL ) {
							MPI_Send( times_page[proc], num_parts_per_proc_page,
								MPI_PARTICLE_TIMES_FLOAT, proc, current_page[proc], mpi.comm.run );
						}

#ifdef STAR_FORMATION
						if ( stellar_filename != NULL ) {
							MPI_Send( star_page[proc], num_star_vars[proc],
								MPI_FLOAT, proc, current_page[proc], mpi.comm.run );
#ifdef STAR_PARTICLE_TYPES
							MPI_Send( star_type_page[proc], num_parts_per_proc_page,
								MPI_INT, proc, 2*current_page[proc]+1, mpi.comm.run );
#endif /* STAR_PARTICLE_TYPES */
							num_star_vars[proc] = 0;
						}
#endif /* STAR_FORMATION */
						count[proc] = 0;
						current_page[proc]++;
					}
				}

				current_id++;
			}
		}
	
		/* send final pages */
		for ( proc = 1; proc < num_procs; proc++ ) {
			MPI_Send( page_ids[proc], count[proc], MPI_INT, proc, 2*current_page[proc], mpi.comm.run );
			MPI_Send( page[proc], 2*nDim*count[proc], MPI_PARTICLE_FLOAT, proc, current_page[proc], mpi.comm.run );

			if ( timestep_filename != NULL ) {
				MPI_Send( times_page[proc], count[proc], MPI_PARTICLE_TIMES_FLOAT, proc, current_page[proc], mpi.comm.run );
				cart_free( times_page[proc] );
			}

#ifdef STAR_FORMATION
			if ( stellar_filename != NULL ) {
				MPI_Send( star_page[proc], num_star_vars[proc], MPI_FLOAT, proc, current_page[proc], mpi.comm.run );
				cart_free( star_page[proc] );
#ifdef STAR_PARTICLE_TYPES
				MPI_Send( star_type_page[proc], num_parts_per_proc_page, MPI_INT, proc, 2*current_page[proc]+1, mpi.comm.run );
				cart_free( star_type_page[proc] );
#endif /* STAR_PARTICLE_TYPES */
			}
#endif /* STAR_FORMATION */

			cart_free( page_ids[proc] );
			cart_free( page[proc] );
		}

#ifdef STAR_FORMATION
		if ( stellar_filename != NULL ) {
#ifdef STAR_PARTICLE_TYPES
            cart_free( types );
#endif /* STAR_PARTICLE_TYPES */
#ifdef ENRICHMENT_SNIa
			cart_free( zstIa );
#endif /* ENRICHMENT_SNIa */
#ifdef ENRICHMENT
			cart_free( zstII );
#endif /* ENRICHMENT */

			cart_free( tbirth );
			cart_free( pw0 );
			cart_free( pw );
		}
#endif /* STAR_FORMATION */

		cart_free( input_page );

		fclose(input);

		if ( num_sfcs > 0 ) {
			cart_free( sfc_map );
		}
	} else {
#ifdef COSMOLOGY
		MPI_Bcast( &auni[min_level], 1, MPI_DOUBLE, MASTER_NODE, mpi.comm.run );
		MPI_Bcast( &abox[min_level], 1, MPI_DOUBLE, MASTER_NODE, mpi.comm.run );
		MPI_Bcast( &auni_init, 1, MPI_DOUBLE, MASTER_NODE, mpi.comm.run );
		MPI_Bcast( (char *)&temp_cosmo, sizeof(struct CosmologyParameters), MPI_BYTE, MASTER_NODE, mpi.comm.run );
		cosmology_copy(&temp_cosmo);
#endif /* COSMOLOGY */

		MPI_Bcast( &tl[min_level], 1, MPI_DOUBLE, MASTER_NODE, mpi.comm.run );
		MPI_Bcast( &dt, 1, MPI_DOUBLE, MASTER_NODE, mpi.comm.run );

		MPI_Bcast( &step, 1, MPI_INT, MASTER_NODE, mpi.comm.run );
		MPI_Bcast( &cart_particle_num_row, 1, MPI_INT, MASTER_NODE, mpi.comm.run );
		MPI_Bcast( &num_particle_species, 1, MPI_INT, MASTER_NODE, mpi.comm.run );
		MPI_Bcast( &num_particles_total, 1, MPI_LONG, MASTER_NODE, mpi.comm.run );
		MPI_Bcast( &num_parts_per_page, 1, MPI_INT, MASTER_NODE, mpi.comm.run );
		MPI_Bcast( &num_parts_per_proc_page, 1, MPI_INT, MASTER_NODE, mpi.comm.run );
		MPI_Bcast( &num_pages, 1, MPI_INT, MASTER_NODE, mpi.comm.run );
		MPI_Bcast( particle_species_mass, num_particle_species, MPI_FLOAT, MASTER_NODE, mpi.comm.run );
		MPI_Bcast( particle_species_num, num_particle_species, MPI_INT, MASTER_NODE, mpi.comm.run );
		MPI_Bcast( particle_species_indices, num_particle_species+1, MPI_INT, MASTER_NODE, mpi.comm.run );

		current_page[local_proc_id] = 0;

		page_ids[local_proc_id] = cart_alloc(int, num_parts_per_proc_page );
		page[local_proc_id] = cart_alloc(PARTICLE_FLOAT, 2*nDim*num_parts_per_proc_page );

		if ( timestep_filename != NULL ) {
		        times_page[local_proc_id] = cart_alloc(PARTICLE_TIMES_FLOAT, num_parts_per_proc_page );
		}

#ifdef STAR_FORMATION
		if ( stellar_filename != NULL ) {
			star_page[local_proc_id] = cart_alloc(float, num_star_variables*num_parts_per_proc_page );
#ifdef STAR_PARTICLE_TYPES
			star_type_page[local_proc_id] = cart_alloc(int, num_parts_per_proc_page );
#endif /* STAR_PARTICLE_TYPES */
		}
#endif /* STAR_FORMATION */

		count[local_proc_id] = num_parts_per_proc_page;
		while ( count[local_proc_id] == num_parts_per_proc_page ) {
			MPI_Recv( page_ids[local_proc_id], num_parts_per_proc_page, MPI_INT, 
				MASTER_NODE, 2*current_page[local_proc_id], mpi.comm.run, &status );
			MPI_Get_count( &status, MPI_INT, &count[local_proc_id] );

			MPI_Recv( page[local_proc_id], 2*nDim*num_parts_per_proc_page, 
				MPI_PARTICLE_FLOAT, MASTER_NODE, current_page[local_proc_id], mpi.comm.run, &status );

			if ( timestep_filename != NULL ) {
				MPI_Recv( times_page[local_proc_id], num_parts_per_proc_page,
					MPI_PARTICLE_TIMES_FLOAT, MASTER_NODE, current_page[local_proc_id], mpi.comm.run, &status );
			}

#ifdef STAR_FORMATION
			if ( stellar_filename != NULL ) {
				MPI_Recv( star_page[local_proc_id], num_star_variables*num_parts_per_proc_page,
					MPI_FLOAT, MASTER_NODE, current_page[local_proc_id], mpi.comm.run, &status );
				num_star_vars[local_proc_id] = 0;

#ifdef STAR_PARTICLE_TYPES
				MPI_Recv( star_type_page[local_proc_id], num_parts_per_proc_page, MPI_INT,
						MASTER_NODE, 2*current_page[local_proc_id]+1, mpi.comm.run, MPI_STATUS_IGNORE );
#endif /* STAR_PARTICLE_TYPES */
			}
#endif /* STAR_FORMATION */
			current_page[local_proc_id]++;

			for ( i = 0; i < count[local_proc_id]; i++ ) {
				ipart = particle_alloc( page_ids[local_proc_id][i] );
				cart_assert( ipart >= 0 && ipart < num_particles );

				particle_x[ipart][0] = page[local_proc_id][2*nDim*i];
				particle_x[ipart][1] = page[local_proc_id][2*nDim*i+1];
				particle_x[ipart][2] = page[local_proc_id][2*nDim*i+2];
				particle_v[ipart][0] = page[local_proc_id][2*nDim*i+3];
				particle_v[ipart][1] = page[local_proc_id][2*nDim*i+4];
				particle_v[ipart][2] = page[local_proc_id][2*nDim*i+5];

				particle_t[ipart] = tl[min_level];

				if ( timestep_filename == NULL ) {
					particle_dt[ipart] = dt;
				} else {
					particle_dt[ipart] = times_page[local_proc_id][i];
				}

#ifdef STAR_FORMATION
				if ( particle_id_is_star( particle_id[ipart] ) ) {
					cart_assert( ipart >= 0 && ipart < num_star_particles );
					cart_assert( particle_is_star(ipart) );

					particle_mass[ipart] = star_page[local_proc_id][num_star_vars[local_proc_id]++];
					star_initial_mass[ipart] = star_page[local_proc_id][num_star_vars[local_proc_id]++];
					star_tbirth[ipart] = star_page[local_proc_id][num_star_vars[local_proc_id]++];

#ifdef ENRICHMENT
					star_metallicity_II[ipart] = star_page[local_proc_id][num_star_vars[local_proc_id]++];
#endif /* ENRICHMENT */
#ifdef ENRICHMENT_SNIa
					star_metallicity_Ia[ipart] = star_page[local_proc_id][num_star_vars[local_proc_id]++];
#endif /* ENRICHMENT_SNIa */
#ifdef STAR_PARTICLE_TYPES
					star_particle_type[ipart] = star_type_page[local_proc_id][i];
#endif /* STAR_PARTICLE_TYPES */
				} else {
					particle_mass[ipart] = particle_species_mass[particle_species(particle_id[ipart])];
				}
#else
				particle_mass[ipart] = particle_species_mass[particle_species(particle_id[ipart])];
#endif /* STAR_FORMATION */
			}
		}

#ifdef STAR_FORMATION
		if ( stellar_filename != NULL ) {
#ifdef STAR_PARTICLE_TYPES
			cart_free( star_type_page[local_proc_id] );
#endif
			cart_free( star_page[local_proc_id] );
		}
#endif /* STAR_FORMATION */

		if ( timestep_filename != NULL ) {
			cart_free( times_page[local_proc_id] );
		}

		cart_free( page[local_proc_id] );
		cart_free( page_ids[local_proc_id] );
	}

	cart_debug("num_local_particles = %u", num_local_particles );
	cart_assert(num_local_particles >= 0 );
	build_particle_list();
}

#undef FUNCTION
#undef PARTICLE_FLOAT
#undef MPI_PARTICLE_FLOAT
#undef PARTICLE_TIMES_FLOAT
#undef MPI_PARTICLE_TIMES_FLOAT

