/*
//  C-style poor man template
*/

#ifndef FUNCTION
#error "FUNCTION must be defined"
#endif

#ifndef PARTICLE_FLOAT
#error "PARTICLE_FLOAT must be defined"
#endif


void FUNCTION( char *particle_header_filename, char *particle_data, float *cell_work, int *constrained_quantities ) {
	int j;
	int index;
	int coords[nDim];
	int page;
	int num_read;

	int num_parts_per_page;
	int num_parts_in_page;
	int num_pages;
	PARTICLE_FLOAT *x, *y, *z;
	PARTICLE_FLOAT *input_page;
	particle_header header;

	FILE *input;
	int endian, nbody_flag;
	int grid_change_flag;
	double rfact;
	double grid_shift;
	
	read_cart_particle_header( particle_header_filename, &header, &endian, &nbody_flag );

	num_particles_total = header.num[ header.Nspecies - 1 ];
	num_parts_per_page = header.Nrow*header.Nrow;
	num_pages = (num_particles_total-1) / num_parts_per_page + 1;

	cart_debug("num_parts_per_page = %d", num_parts_per_page );
	cart_debug("num_particles_total = %d", num_particles_total );
	cart_debug("num_pages = %d", num_pages );

	if ( nbody_flag ) {
		grid_shift = 1.5;
	} else {
		grid_shift = 1.0;
	}

	if ( header.Ngrid != num_grid ) {
		rfact = (float)num_grid / (float)header.Ngrid;
		grid_change_flag = 1;
	} else {
		grid_change_flag = 0;
	}

	input_page = cart_alloc(PARTICLE_FLOAT, nDim*num_parts_per_page );

	x = input_page;
	y = &input_page[num_parts_per_page];
	z = &input_page[2*num_parts_per_page];

	input = fopen( particle_data, "r" );
	if ( input == NULL ) {
		cart_error( "Unable to load particle data file!\n");
	}

	for ( page = 0; page < num_pages; page++ ) {
		if ( page == num_pages - 1 ) {
			num_parts_in_page = num_particles_total - 
				num_parts_per_page*(num_pages-1);
		} else {
			num_parts_in_page = num_parts_per_page;
		}

		num_read = fread( input_page, sizeof(PARTICLE_FLOAT), 
				nDim*num_parts_per_page, input );

		if ( num_read != nDim*num_parts_per_page ) {
			cart_error("Error reading from particle file %s: insufficient data", particle_data );
		}

		if ( endian ) {
			for ( j = 0; j < num_parts_in_page; j++ ) {
				reorder( (char *)&x[j], sizeof(PARTICLE_FLOAT) );
				reorder( (char *)&y[j], sizeof(PARTICLE_FLOAT) );
				reorder( (char *)&z[j], sizeof(PARTICLE_FLOAT) );
			}
		}

		for ( j = 0; j < num_parts_in_page; j++ ) {
			x[j] -= grid_shift;
			y[j] -= grid_shift;
			z[j] -= grid_shift;

			if ( grid_change_flag ) {
				x[j] *= rfact;
				y[j] *= rfact;
				z[j] *= rfact;
			}

			/* enforce periodic boundary conditions */
			if ( x[j] < 0.0 ) {
				x[j] += (double)num_grid;
			} else if ( x[j] >= (double)num_grid ) {
				x[j] -= (double)num_grid;
			}

			if ( y[j] < 0.0 ) {
				y[j] += (double)num_grid;
			} else if ( y[j] >= (double)num_grid ) {
				y[j] -= (double)num_grid;
			}

			if ( z[j] < 0.0 ) {
				z[j] += (double)num_grid;
			} else if ( z[j] >= (double)num_grid ) {
				z[j] -= (double)num_grid;
			}

			coords[0] = (int)(x[j]);
			coords[1] = (int)(y[j]);
			coords[2] = (int)(z[j]);

			index = sfc_index( coords );
			cart_assert( index >= 0 && index < num_root_cells );

			constrained_quantities[num_constraints*index+1]++;
			cell_work[index] += cost_per_particle;
		}

		fseek( input, nDim*num_parts_per_page*sizeof(PARTICLE_FLOAT), SEEK_CUR );
	}

	cart_free( input_page );
	fclose(input);
}

#undef FUNCTION
#undef PARTICLE_FLOAT
